version: '3.8'

services:
  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/cache:/var/cache/nginx
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - cdn-network  # Only one entry needed
    depends_on:
      - origin-server
      - edge-server-1
      - edge-server-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Origin Server
  origin-server:
    build:
      context: ./origin-server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - ./uploads:/app/uploads
    networks:
      - cdn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Edge Server 1 (US East)
  edge-server-1:
    build:
      context: ./edge-server
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - EDGE_ID=edge-1
      - REGION=us-east
      - ORIGIN_URL=http://origin-server:3000
      - REDIS_URL=redis://redis-cluster:6379
    volumes:
      - ./cache/edge-1:/cache
    networks:
      - cdn-network
    depends_on:
      - origin-server
      - redis-cluster
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Edge Server 2 (EU West)
  edge-server-2:
    build:
      context: ./edge-server
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - EDGE_ID=edge-2
      - REGION=eu-west
      - ORIGIN_URL=http://origin-server:3000
      - REDIS_URL=redis://redis-cluster:6379
    volumes:
      - ./cache/edge-2:/cache
    networks:
      - cdn-network
    depends_on:
      - origin-server
      - redis-cluster
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
    networks:
      - cdn-network
    depends_on:
      - origin-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and coordination
  redis-cluster:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_data:/data
    networks:
      - cdn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for metadata
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cdn_db
      - POSTGRES_USER=cdn_user
      - POSTGRES_PASSWORD=cdn_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cdn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cdn_user -d cdn_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB for metrics
  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword
      - DOCKER_INFLUXDB_INIT_ORG=cdn-org
      - DOCKER_INFLUXDB_INIT_BUCKET=cdn-metrics
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - cdn-network
    restart: unless-stopped

networks:
  cdn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local